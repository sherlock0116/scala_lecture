/**
 *
 * 第一部分 函数式编程
 * 			1. 什么是函数式编程
 * 			2. 在 Scala 中使用函数式编程
 * 			3. 函数式数据结构
 * 			4. 不使用异常来处理错误
 * 			5. 严格求值和惰性求值
 * 			6. 纯函数式状态
 *
 * 第二部分 功能设计和组合子库
 * 			7. 纯函数式并行计算
 * 			8. 基于性质的测试
 * 			9. 语法分析器组合子
 *
 * 第三部分
 */
package object Part01_Introduction_of_functional_programming {
	
	/*
				函数式编程基于一个简单又蕴意深远的前提: 只用纯函数来构造程序
		换句话说, 函数没有副作用.
				一个带有副作用的函数不仅只是简单地返回一个值, 还干了其他事情, 比如:
		1.	修改一个变量
		2.	直接修改数据结构
		3. 设置一个对象的成员
		4. 抛出一个异常或者一个错误停止
		5. 打印到终端或读取用户的输入
		6. 读取或写入一个文件
		7. 在屏幕上绘画
		
				函数式编程限制的是怎样写程序, 而非表达什么样的程序.
				本书将学习到如何没有副作用的表达我们的程序, 包括执行 I/O、处理错误、
		修改数据.
				纯函数的模块化特性, 它们很容易被测试、复用、并行化、泛华以及推导
	 */
}
